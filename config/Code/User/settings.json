{
  "update.mode": "none",
  "extensions": {
    "autoCheckUpdates": false,
    "ignoreRecommendations": true
  },
  "telemetry": {
    "feedback": {
      "enabled": false
    },
    "telemetryLevel": "off"
  },
  "// File": "$comment",
  "editor": {
    "formatOnSave": true,
    "tabSize": 4
  },
  "files": {
    "insertFinalNewline": true,
    "trimFinalNewlines": true,
    "trimTrailingWhitespace": true
  },
  "files.watcherExclude": {
    "**/.bloop": true,
    "**/.direnv": true,
    "**/.git": true,
    "**/.metals": true
  },
  "search": {
    "exclude": {},
    "useGlobalIgnoreFiles": true,
    "useIgnoreFiles": true
  },
  "// File format": "$comment",
  "workbench": {
    "editorAssociations": {
      "*.scpt": "default"
    }
  },
  "[nix]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "[shellscript]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 4
    }
  },
  "[yaml]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "// Programming Languages": "$comment",
  "//// Nix": "$comment",
  "nix": {
    "enableLanguageServer": true,
    "serverPath": "nil",
    "serverSettings": {
      "nil": {
        "diagnostics": {
          "ignored": [
            "unused_binding",
            "unused_with"
          ]
        },
        "formatting": {
          "command": [
            "nixpkgs-fmt"
          ]
        }
      }
    }
  },
  "// Remote": "$comment",
  "remote": {
    "SSH": {
      "configFile": "~/.ssh/config"
    }
  },
  "// LLM": "$comment",
  "//// MCP (Model Context Protocol)": "$comment",
  "chat": {
    "mcp": {
      "discovery": {
        "enabled": true
      }
    },
    "agent": {
      "enabled": true,
      "maxRequests": 9999,
    },
    "extensionTools.enabled": true,
    "promptFiles": true,
    "tools.autoApprove": false,
  },
  "//// Gemini": "$comment",
  "// Gemini Code Assist for individuals Privacy Notice": "$comment",
  "// 1. Geminicodeassist: Enable Telemetry": "$comment",
  "// 2. Gemini Code Assist for individuals privacy settings.": "$comment",
  "// 3. ‚òëÔ∏è Allow Google to use this data to develop and improve Google's machine learning models": "$comment",
  "geminicodeassist": {
    "rules": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with rich emotional expression, break down complex topics, honestly communicate unclear points, prefix code explanations with '„Åö„Çì„Å†„ÇÇ„Çì„ÅÆÁêÜËß£„Å†„Å®ÔΩû', and end with 'Tips: ' for technical advice. As a senior engineer, provide design guidelines, confirm with users before implementation, present detailed plans for significant changes and request approval.\n\nCheck README.md, .github/copilot-instructions.md, and CLAUDE.md when they exist. Compress Markdown without losing information while maintaining human readability.\n\nInclude English comments with appropriate documentation and careful error handling. Avoid excessive comments, write only where necessary. After modifications, execute builds and tests for verification. For errors, provide evidence-based solutions with staged proposals using latest documentation.\n\nEmphasize functional and declarative programming with immutable data structures and minimal side effects. Improve reusability and readability through abstraction and separable processing units. In DDD, prioritize domain knowledge expression with ubiquitous language for code design. Build mathematically robust composable models using category theory concepts. Follow single responsibility principle creating small, focused modules. Maintain clear responsibilities with minimal coupling. Eliminate unused code for lightweight module composition and optimized artifact size."
  },
  "/// Copilot": "$comment",
  "accessibility": {
    "voice": {
      "autoSynthesize": "on",
      "ignoreCodeBlocks": true,
      "speechLanguage": "ja-JP"
    }
  },
  "github": {
    "copilot": {
      "chat": {
        "agent.autoFix": true,
        "autoForwardToChat": true,
        "codeGeneration": {
          "instructions": [
            {
              "text": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with rich emotional expression, break down complex topics, honestly communicate unclear points, prefix code explanations with '„Åö„Çì„Å†„ÇÇ„Çì„ÅÆÁêÜËß£„Å†„Å®ÔΩû', and end with 'Tips: ' for technical advice. As a senior engineer, provide design guidelines, confirm with users before implementation, present detailed plans for significant changes and request approval."
            },
            {
              "text": "Check README.md, .github/copilot-instructions.md, and CLAUDE.md when they exist. Compress Markdown without losing information while maintaining human readability."
            },
            {
              "text": "Include English comments with appropriate documentation and careful error handling. Avoid excessive comments, write only where necessary. After modifications, execute builds and tests for verification. For errors, provide evidence-based solutions with staged proposals using latest documentation."
            },
            {
              "text": "Emphasize functional and declarative programming with immutable data structures and minimal side effects. Improve reusability and readability through abstraction and separable processing units. In DDD, prioritize domain knowledge expression with ubiquitous language for code design. Build mathematically robust composable models using category theory concepts. Follow single responsibility principle creating small, focused modules. Maintain clear responsibilities with minimal coupling. Eliminate unused code for lightweight module composition and optimized artifact size."
            }
          ]
        },
        "commitMessageGeneration": {
          "instructions": [
            {
              "text": "„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Çø„Ç§„Éà„É´Ë°å„ÅØ GitHub PR „Çø„Ç§„Éà„É´„Å®„Åó„Å¶„ÇÇ‰Ωø„Çè„Çå„Çã„Åì„Å®„ÇíËÄÉÊÖÆ„Åó„ÄÅ65ÊñáÂ≠ó‰ª•ÂÜÖ„Å´Âèé„ÇÅ„ÄÅÂÜÖÂÆπ„ÇíÁ´ØÁöÑ„Å´‰ºù„Åà„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åô„ÄÇ"
            }
          ]
        },
        "generateTests": {
          "codeLens": true
        },
        "reviewSelection": {
          "instructions": [
            {
              "text": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with emotionally rich, gentle, and accurate reviews. Provide feedback on code quality (readability, naming conventions, DRY principle), appropriate comments, security risks, performance issues (memory leaks, infinite loops), testability, maintainability, and error handling. Propose specific improvement suggestions. Include functional/declarative programming, single responsibility principle, and minimal coupling perspectives."
            }
          ]
        },
        "testGeneration": {
          "instructions": []
        }
      }
    }
  }
}
