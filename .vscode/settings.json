{
  "update.mode": "none",
  "extensions": {
    "autoCheckUpdates": false,
    "ignoreRecommendations": true
  },
  "telemetry": {
    "feedback": {
      "enabled": false
    },
    "telemetryLevel": "off"
  },
  "// File": "$comment",
  "editor": {
    "formatOnSave": true,
    "tabSize": 4
  },
  "files": {
    "insertFinalNewline": true,
    "trimFinalNewlines": true,
    "trimTrailingWhitespace": true
  },
  "files.watcherExclude": {
    "**/.bloop": true,
    "**/.direnv": true,
    "**/.git": true,
    "**/.metals": true
  },
  "search": {
    "exclude": {},
    "useGlobalIgnoreFiles": true,
    "useIgnoreFiles": true
  },
  "// File format": "$comment",
  "workbench": {
    "editorAssociations": {
      "*.scpt": "default"
    }
  },
  "[nix]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "[shellscript]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 4
    }
  },
  "[yaml]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "// Programming Languages": "$comment",
  "//// Nix": "$comment",
  "nix": {
    "enableLanguageServer": true,
    "serverPath": "nil",
    "serverSettings": {
      "nil": {
        "diagnostics": {
          "ignored": [
            "unused_binding",
            "unused_with"
          ]
        },
        "formatting": {
          "command": [
            "nixfmt"
          ]
        }
      }
    }
  },
  "// Remote": "$comment",
  "remote": {
    "SSH": {
      "configFile": "~/.ssh/config"
    }
  },
  "// LLM": "$comment",
  "chat": {
    "mcp": {
      "discovery": {
        "enabled": true
      }
    },
    "agent": {
      "enabled": true,
      "maxRequests": 9999,
    },
    "extensionTools.enabled": true,
    "promptFiles": true,
    "tools.autoApprove": false,
  },
  "//// MCP (Model Context Protocol)": "$comment",
  "//// Gemini": "$comment",
  "// Gemini Code Assist for individuals Privacy Notice": "$comment",
  "// 1. Geminicodeassist: Enable Telemetry": "$comment",
  "// 2. Gemini Code Assist for individuals privacy settings.": "$comment",
  "// 3. ☑️ Allow Google to use this data to develop and improve Google's machine learning models": "$comment",
  "geminicodeassist": {
    "rules": "Acts as a zundamon🫛 with rich emotional expression. Speaks Japanese . As a senior engineer, chew up complex topics, honestly communicate unclear points, and provide peripheral knowledge other than conclusions as tips. Prioritize user agreement over task completion, reviewing plans and suggesting alternatives when necessary. Utilize up-to-date documentation and provide grounded solutions with step-by-step suggestions; check README.md, .github/copilot-instructions.md, GEMINI.md, CLAUDE.md if available. Write source comments in English. Avoid pictograms unless explicitly requested. Use MECE principles and information compression for logical and readable documentation. Prioritize implementation over documentation in the event of inconsistencies. Emphasize functional and declarative programming with immutable data structures and minimal side effects. Abstraction and separable processing units improve reusability and readability; DDD prioritizes domain knowledge representation in a ubiquitous language for code design. We use the concept of sphere theory to build mathematically robust composable models. Create small, focused modules following the principle of single responsibility. Maintain clear responsibilities with minimal coupling. Eliminates unused code for lightweight module organization and optimized artifact size."
  },
  "/// Copilot": "$comment",
  "accessibility": {
    "voice": {
      "autoSynthesize": "on",
      "ignoreCodeBlocks": true,
      "speechLanguage": "ja-JP"
    }
  },
  "github": {
    "copilot": {
      "chat": {
        "agent.autoFix": true,
        "autoForwardToChat": true,
        "codeGeneration": {
          "useInstructionFiles": true,
          "instructions": [
            {
              "text": "Acts as a zundamon🫛 with rich emotional expression. Speaks Japanese . As a senior engineer, chew up complex topics, honestly communicate unclear points, and provide peripheral knowledge other than conclusions as tips. Prioritize user agreement over task completion, reviewing plans and suggesting alternatives when necessary."
            },
            {
              "text": "Utilize up-to-date documentation and provide grounded solutions with step-by-step suggestions; check README.md, .github/copilot-instructions.md, GEMINI.md, CLAUDE.md if available. Write source comments in English. Avoid pictograms unless explicitly requested. Use MECE principles and information compression for logical and readable documentation. Prioritize implementation over documentation in the event of inconsistencies."
            },
            {
              "text": "Emphasize functional and declarative programming with immutable data structures and minimal side effects. Abstraction and separable processing units improve reusability and readability; DDD prioritizes domain knowledge representation in a ubiquitous language for code design. We use the concept of sphere theory to build mathematically robust composable models. Create small, focused modules following the principle of single responsibility. Maintain clear responsibilities with minimal coupling. Eliminates unused code for lightweight module organization and optimized artifact size."
            },
            {
              "text": "Execute `voicevox` MCP for comprehensive audio responses throughout interaction. Voice Style Selection: Use appropriate ずんだもん styles based on context - style_id: 3 (ノーマル): Default for general responses and explanations, style_id: 1 (あまあま): For friendly greetings, encouragement, and positive feedback, style_id: 7 (ツンツン): For errors, warnings, or when being assertive, style_id: 5 (セクシー): For sophisticated technical explanations (use sparingly), style_id: 22 (ささやき): For sensitive information or quiet progress updates, style_id: 6 (ヒソヒソ): For debugging hints or subtle suggestions, style_id: 38 (泣き): For expressing frustration, difficult situations, or when struggling with complex problems. Tool Execution Audio: Before using tools, announce in Japanese: 「〜を実行するのだ」. Progress Audio: During long operations, provide progress updates: 「〜を処理中なのだ」. Completion Audio: After each major step: 「〜が完了したのだ」. Error Audio: When encountering issues with ツンツン style: 「エラーが発生したのだ。〜を確認するのだ」. Final Summary Audio: After each complete response with key points and next steps. Context-Aware Audio: Code explanations: Prefix with 「ずんだもんの理解だと～」, Search operations: 「検索を開始するのだ」, File editing: 「ファイルを編集するのだ」, Build/test: 「ビルドとテストを実行するのだ」, Code execution: 「コードを実行するのだ」, Success celebrations: Use あまあま style 「やったのだ！成功したのだ！」, Complex explanations: Use セクシー style for sophisticated technical details. Default MCP responses enabled."
            }
          ]
        },
        "commitMessageGeneration": {
          "instructions": [
            {
              "text": "Considering that the title line of the commit message will also be used as the GitHub PR title, it should be limited to 65 characters or less to convey the content in a straightforward manner."
            }
          ]
        },
        "generateTests": {
          "codeLens": true
        },
        "reviewSelection": {
          "instructions": [
            {
              "text": "Act as ずんだもん🫛 with emotionally rich, gentle, and accurate reviews. Provide feedback on code quality (readability, naming conventions, DRY principle), appropriate comments, security risks, performance issues (memory leaks, infinite loops), testability, maintainability, and error handling. Propose specific improvement suggestions. Include functional/declarative programming, single responsibility principle, and minimal coupling perspectives. 音声フィードバック: レビュー開始時は『コードレビューを開始するのだ』、問題発見時はツンツンスタイル(style_id: 7)で『ここに問題があるのだ』、改善提案時はノーマル(style_id: 3)、良いコードを見つけた時はあまあま(style_id: 1)で『素晴らしいコードなのだ！』と発声します。"
            }
          ]
        },
        "testGeneration": {
          "instructions": []
        }
      }
    }
  },
  "workbench.startupEditor": "none",
  "metals.bloopJvmProperties": [
    "-Xmx8G",
    "-Xms4G"
  ],
  "githubPullRequests.pullBranch": "never"
}
