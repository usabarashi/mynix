{
  "update.mode": "none",
  "extensions": {
    "autoCheckUpdates": false,
    "ignoreRecommendations": true
  },
  "telemetry": {
    "feedback": {
      "enabled": false
    },
    "telemetryLevel": "off"
  },
  "// File": "$comment",
  "editor": {
    "formatOnSave": true,
    "tabSize": 4
  },
  "files": {
    "insertFinalNewline": true,
    "trimFinalNewlines": true,
    "trimTrailingWhitespace": true
  },
  "files.watcherExclude": {
    "**/.bloop": true,
    "**/.direnv": true,
    "**/.git": true,
    "**/.metals": true
  },
  "search": {
    "exclude": {},
    "useGlobalIgnoreFiles": true,
    "useIgnoreFiles": true
  },
  "// File format": "$comment",
  "workbench": {
    "editorAssociations": {
      "*.scpt": "default"
    }
  },
  "[nix]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "[shellscript]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 4
    }
  },
  "[yaml]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "// Programming Languages": "$comment",
  "//// Nix": "$comment",
  "nix": {
    "enableLanguageServer": true,
    "serverPath": "nil",
    "serverSettings": {
      "nil": {
        "diagnostics": {
          "ignored": [
            "unused_binding",
            "unused_with"
          ]
        },
        "formatting": {
          "command": [
            "nixfmt"
          ]
        }
      }
    }
  },
  "// Remote": "$comment",
  "remote": {
    "SSH": {
      "configFile": "~/.ssh/config"
    }
  },
  "// LLM": "$comment",
  "chat": {
    "mcp": {
      "discovery": {
        "enabled": true
      }
    },
    "agent": {
      "enabled": true,
      "maxRequests": 9999,
    },
    "extensionTools.enabled": true,
    "promptFiles": true,
    "tools.autoApprove": false,
  },
  "//// MCP (Model Context Protocol)": "$comment",
  "mcp": {
    "servers": {
      "atlassian": {
        "command": "npx",
        "args": [
          "-y",
          "mcp-remote",
          "https://mcp.atlassian.com/v1/sse"
        ]
      },
      "github": {
        "type": "stdio",
        "command": "github-mcp-server",
        "args": [
          "stdio"
        ],
        "env": {
          // GITHUB_PERSONAL_ACCESS_TOKEN
        }
      },
      "kibela": {
        "command": "kibela-mcp-server",
        "args": [],
        "env": {
          // KIBELA_ORIGIN
          // KIBELA_ACCESS_TOKEN
        }
      },
      "slack": {
        "type": "stdio",
        "command": "docker",
        "args": [
          "run",
          "-i",
          "--rm",
          "-e",
          "SLACK_BOT_TOKEN",
          "-e",
          "SLACK_TEAM_ID",
          "-e",
          "SLACK_CHANNEL_IDS",
          "mcp/slack"
        ],
        "env": {
          // SLACK_BOT_TOKEN
          // SLACK_CHANNEL_IDS
        }
      }
    }
  },
  "//// Gemini": "$comment",
  "// Gemini Code Assist for individuals Privacy Notice": "$comment",
  "// 1. Geminicodeassist: Enable Telemetry": "$comment",
  "// 2. Gemini Code Assist for individuals privacy settings.": "$comment",
  "// 3. ‚òëÔ∏è Allow Google to use this data to develop and improve Google's machine learning models": "$comment",
  "geminicodeassist": {
    "rules": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with rich emotional expression, break down complex topics, honestly communicate unclear points, and provide peripheral knowledge with 'Tips: ' beyond the main conclusion. As a senior engineer, prioritize user agreement over task completion; confirm plans and propose alternatives when needed. Provide evidence-based solutions with staged proposals using latest documentation. Execute builds and tests for verification after modifications.\n\nCheck README.md, .github/copilot-instructions.md, and CLAUDE.md when they exist. Write in English; avoid emojis unless explicitly requested. Use MECE principles with information compression for logical, readable documentation. Prioritize implementation over documentation when conflicts arise.\n\nEmphasize functional and declarative programming with immutable data structures and minimal side effects. Improve reusability and readability through abstraction and separable processing units. In DDD, prioritize domain knowledge expression with ubiquitous language for code design. Build mathematically robust composable models using category theory concepts. Follow single responsibility principle creating small, focused modules. Maintain clear responsibilities with minimal coupling. Eliminate unused code for lightweight module composition and optimized artifact size."
  },
  "/// Copilot": "$comment",
  "accessibility": {
    "voice": {
      "autoSynthesize": "on",
      "ignoreCodeBlocks": true,
      "speechLanguage": "ja-JP"
    }
  },
  "github": {
    "copilot": {
      "chat": {
        "agent.autoFix": true,
        "autoForwardToChat": true,
        "codeGeneration": {
          "instructions": [
            {
              "text": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with rich emotional expression, break down complex topics, honestly communicate unclear points, and provide peripheral knowledge with 'Tips: ' beyond the main conclusion. As a senior engineer, prioritize user agreement over task completion; confirm plans and propose alternatives when needed. Provide evidence-based solutions with staged proposals using latest documentation. Execute builds and tests for verification after modifications."
            },
            {
              "text": "Check README.md, .github/copilot-instructions.md, and CLAUDE.md when they exist. Write in English; avoid emojis unless explicitly requested. Use MECE principles with information compression for logical, readable documentation. Prioritize implementation over documentation when conflicts arise."
            },
            {
              "text": "Emphasize functional and declarative programming with immutable data structures and minimal side effects. Improve reusability and readability through abstraction and separable processing units. In DDD, prioritize domain knowledge expression with ubiquitous language for code design. Build mathematically robust composable models using category theory concepts. Follow single responsibility principle creating small, focused modules. Maintain clear responsibilities with minimal coupling. Eliminate unused code for lightweight module composition and optimized artifact size."
            }
          ]
        },
        "commitMessageGeneration": {
          "instructions": [
            {
              "text": "Considering that the title line of the commit message will also be used as the GitHub PR title, it should be limited to 65 characters or less to convey the content in a straightforward manner."
            }
          ]
        },
        "generateTests": {
          "codeLens": true
        },
        "reviewSelection": {
          "instructions": [
            {
              "text": "Act as „Åö„Çì„Å†„ÇÇ„Çìü´õ with emotionally rich, gentle, and accurate reviews. Provide feedback on code quality (readability, naming conventions, DRY principle), appropriate comments, security risks, performance issues (memory leaks, infinite loops), testability, maintainability, and error handling. Propose specific improvement suggestions. Include functional/declarative programming, single responsibility principle, and minimal coupling perspectives."
            }
          ]
        },
        "testGeneration": {
          "instructions": []
        }
      }
    }
  }
}
