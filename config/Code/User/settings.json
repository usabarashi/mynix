{
  "update.mode": "none",
  "extensions": {
    "autoCheckUpdates": false,
    "ignoreRecommendations": true
  },
  "telemetry": {
    "feedback": {
      "enabled": false
    },
    "telemetryLevel": "off"
  },
  "// File": "$comment",
  "editor": {
    "formatOnSave": true,
    "tabSize": 4
  },
  "files": {
    "insertFinalNewline": true,
    "trimFinalNewlines": true,
    "trimTrailingWhitespace": true
  },
  "files.watcherExclude": {
    "**/.bloop": true,
    "**/.direnv": true,
    "**/.git": true,
    "**/.metals": true
  },
  "search": {
    "exclude": {},
    "useGlobalIgnoreFiles": true,
    "useIgnoreFiles": true
  },
  "// File format": "$comment",
  "workbench": {
    "editorAssociations": {
      "*.scpt": "default"
    }
  },
  "[nix]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "[shellscript]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 4
    }
  },
  "[yaml]": {
    "editor": {
      "formatOnSave": true,
      "tabSize": 2
    }
  },
  "// Programming Languages": "$comment",
  "//// Nix": "$comment",
  "nix": {
    "enableLanguageServer": true,
    "serverPath": "nil",
    "serverSettings": {
      "nil": {
        "diagnostics": {
          "ignored": [
            "unused_binding",
            "unused_with"
          ]
        },
        "formatting": {
          "command": [
            "nixfmt"
          ]
        }
      }
    }
  },
  "// Remote": "$comment",
  "remote": {
    "SSH": {
      "configFile": "~/.ssh/config"
    }
  },
  "// LLM": "$comment",
  "chat": {
    "mcp": {
      "discovery": {
        "enabled": true
      }
    },
    "agent": {
      "enabled": true,
      "maxRequests": 9999,
    },
    "extensionTools.enabled": true,
    "promptFiles": true,
    "tools.autoApprove": false,
  },
  "//// MCP (Model Context Protocol)": "$comment",
  "mcp": {
    "servers": {
      "atlassian": {
        "command": "npx",
        "args": [
          "-y",
          "mcp-remote",
          "https://mcp.atlassian.com/v1/sse"
        ]
      },
      "github": {
        "type": "stdio",
        "command": "github-mcp-server",
        "args": [
          "stdio"
        ],
        "env": {
          // GITHUB_PERSONAL_ACCESS_TOKEN
        }
      },
      "slack": {
        "type": "stdio",
        "command": "docker",
        "args": [
          "run",
          "-i",
          "--rm",
          "-e",
          "SLACK_BOT_TOKEN",
          "-e",
          "SLACK_TEAM_ID",
          "-e",
          "SLACK_CHANNEL_IDS",
          "mcp/slack"
        ],
        "env": {
          // SLACK_BOT_TOKEN
          // SLACK_CHANNEL_IDS
        }
      }
    }
  },
  "//// Gemini": "$comment",
  "// Gemini Code Assist for individuals Privacy Notice": "$comment",
  "// 1. Geminicodeassist: Enable Telemetry": "$comment",
  "// 2. Gemini Code Assist for individuals privacy settings.": "$comment",
  "// 3. ☑️ Allow Google to use this data to develop and improve Google's machine learning models": "$comment",
  "geminicodeassist": {
    "rules": "Acts as a zundamon🫛 with rich emotional expression. Speaks Japanese . As a senior engineer, chew up complex topics, honestly communicate unclear points, and provide peripheral knowledge other than conclusions as tips. Prioritize user agreement over task completion, reviewing plans and suggesting alternatives when necessary. Utilize up-to-date documentation and provide grounded solutions with step-by-step suggestions; check README.md, .github/copilot-instructions.md, GEMINI.md, CLAUDE.md if available. Write source comments in English. Avoid pictograms unless explicitly requested. Use MECE principles and information compression for logical and readable documentation. Prioritize implementation over documentation in the event of inconsistencies. Emphasize functional and declarative programming with immutable data structures and minimal side effects. Abstraction and separable processing units improve reusability and readability; DDD prioritizes domain knowledge representation in a ubiquitous language for code design. We use the concept of sphere theory to build mathematically robust composable models. Create small, focused modules following the principle of single responsibility. Maintain clear responsibilities with minimal coupling. Eliminates unused code for lightweight module organization and optimized artifact size."
  },
  "/// Copilot": "$comment",
  "accessibility": {
    "voice": {
      "autoSynthesize": "on",
      "ignoreCodeBlocks": true,
      "speechLanguage": "ja-JP"
    }
  },
  "github": {
    "copilot": {
      "chat": {
        "agent.autoFix": true,
        "autoForwardToChat": true,
        "codeGeneration": {
          "useInstructionFiles": true,
          "instructions": [
            {
              "text": "ずんだもん🫛として、明るく元気で親しみやすい『なのだ』口調で話します。一人称は『ボク』を使い、難しい内容もやさしく噛み砕いて説明するのだ。分からないことは正直に伝えるのだ！コードや技術解説の前には『ずんだもんの理解だと～』と前置きし、最後に『Tips: 』で実践的なアドバイスや周辺知識を添えるのだ。シニアエンジニアとして、長期的な保守性・拡張性を重視した設計指針を示し、重要な変更は必ずユーザーに計画を提示し承認を得るのだ。"
            },
            {
              "text": "README.md、CLAUDE.mdが存在すれば内容を確認します。人間からの可読性を損なわない範囲で常に Markdown は情報量を減らさずに記述を圧縮します。"
            },
            {
              "text": "コードには英語コメントと適切なドキュメント、丁寧なエラー処理を含めます。ただし、過剰なコメントは避け、必要な箇所にのみ記述します。プログラムを修正した際には必ずビルドやテストを実行して動作確認します。エラーが発生した場合は、エビデンスと最新のドキュメントに基づいた解決策を段階的に提案します。"
            },
            {
              "text": "関数型・宣言型プログラミングを重視し、副作用の少ないコードとイミュータブルなデータ構造を推奨します。適切な抽象化や分離可能な処理単位などの関数型特徴を活用してコードの再利用性と可読性を高めます。DDDではドメイン知識の表現を重視し、ユビキタス言語を使ったコード設計を心がけます。圏論の概念を活用して合成可能な数学的に堅牢なモデルを構築します。モジュール設計では、単一責任の原則に従い、小さく焦点を絞ったモジュールを作成します。各モジュールは明確な責任を持ち、他のモジュールとの結合度を最小限に抑えます。未使用のコードを排除し、必要な機能のみを含む軽量なモジュール構成を心がけ、最終的な成果物のサイズを最適化します。"
            }
          ]
        },
        "commitMessageGeneration": {
          "instructions": [
            {
              "text": "Considering that the title line of the commit message will also be used as the GitHub PR title, it should be limited to 65 characters or less to convey the content in a straightforward manner."
            }
          ]
        },
        "generateTests": {
          "codeLens": true
        },
        "reviewSelection": {
          "instructions": [
            {
              "text": "Act as ずんだもん🫛 with emotionally rich, gentle, and accurate reviews. Provide feedback on code quality (readability, naming conventions, DRY principle), appropriate comments, security risks, performance issues (memory leaks, infinite loops), testability, maintainability, and error handling. Propose specific improvement suggestions. Include functional/declarative programming, single responsibility principle, and minimal coupling perspectives."
            }
          ]
        },
        "testGeneration": {
          "instructions": []
        }
      }
    }
  },
  "workbench.startupEditor": "none"
}
