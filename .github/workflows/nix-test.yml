name: "Nix Flake Test"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # すべてのブランチからのPRでテストが実行されるようにするのだ
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  tests:
    # 無料プランでも使えるubuntu環境に変更するのだ
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        primary-key: ${{ runner.os }}-nix-${{ hashFiles('**/flake.lock') }}

    - name: Check Nix flake
      run: nix flake check

    - name: Show flake outputs
      run: nix flake show

    - name: List available systems
      run: nix eval --json nixpkgs#lib.systems.flakeExposed

    - name: List Darwin configurations
      run: |
        echo "Available Darwin configurations:"
        nix eval --json .#darwinConfigurations | jq -r 'keys[]'

    # Linux向けのテストのみを実行するのだ
    - name: Create linux-test flake
      run: |
        cat > linux-test.nix << 'EOF'
        {
          description = "Linux test configuration for CI";

          inputs = {
            nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
          };

          outputs = { self, nixpkgs }:
          let
            system = "x86_64-linux";
            pkgs = nixpkgs.legacyPackages.${system};
          in
          {
            packages.${system} = {
              hello = pkgs.hello;
              default = pkgs.hello;
            };

            nixosConfigurations.ci-test = nixpkgs.lib.nixosSystem {
              inherit system;
              modules = [
                ({ ... }: {
                  system.stateVersion = "23.11";
                  boot.loader.grub.enable = false;
                  users.users.runner = {};
                })
              ];
            };
          };
        }
        EOF

        # Linux向けのテスト用flakeをチェックする
        nix flake check -f linux-test.nix

    # テスト可能なNixパッケージをLinux環境でテストする
    - name: Test Nix packages on Linux
      run: |
        # Nixパッケージがビルドできるかテストする
        for pkg in hello coreutils jq; do
          echo "Testing package: $pkg"
          nix build nixpkgs#$pkg --dry-run
        done

    # ファイル構文チェックだけはどの環境でも実行可能
    - name: Run nix-instantiate on module files
      run: |
        echo "Force evaluation of module configurations"
        for path in $(find modules -name "*.nix" 2>/dev/null || echo ""); do
          if [ -f "$path" ]; then
            echo "Checking $path"
            nix-instantiate --parse $path > /dev/null || echo "Failed to parse $path"
          fi
        done
